表及其字段分析
    用户表(UserInfo)：
            用户电话phone
            用户头像avatar
            创建时间(用datefield)

            blog           >>>>>site           一对一个人站点表


    个人站点(Blog)：
            站点名称site_name
            站点标题site_title
            站点样式site_theme

            个人站点页面里面有多篇文章，多个分类，多个标签，那你的个人站点是一的一方，外键字段应该建在多的一方，那也就意味着个人站点不需要建任何外键字段，都是别的表与这张表有关联

    文章标签表(Tag)：存在个人站点里面的
            标签名name
            blog    >>>>>   Blog        一对多个人站点表

    分类表(Category)：
            分类名称name
             blog    >>>>>   Blog        一对多个人站点表

    文章表(Article)：
            文章标题title
            文章简介desc
            文章详情content
            文章发布时间create_time

            blog    >>>>>   Blog        一对多个人站点表
            tags    >>>>>   Tag         多对多标签表
            category>>>>>   Category    一对多个人分类表

            # 数据库查询优化
            我可以通过点赞点踩表拿到文章的点赞数(或点踩数)，但要跨表然后去拿点赞/点踩数，而首页里面渲染了很多篇文章，每篇文章都要拿点赞点踩数，评论数，这样请求就太多了，一篇文章就要请求三个字段，跨表跨三次，太麻烦了，跨表跨的太频繁了，这时候该怎么做呢？
            虽然点赞点踩表里面已经记录了文章与点赞点踩直接的关系，但我们还可以建三个普通的字段：
            文章评论数content_num
            文章点赞数up_num
            文章点踩数down_num
            为什么已经有一张表存了，你还存它干嘛呢？这是因为我存这三个普通的字段我查文章的时候不需要跨表了，我直接就拿到我这个文章的评论数是多少，点赞数是多少，点踩数是多少
            这么做虽然优化了，但需要注意：你这里存了三个普通的字段，在后续操作点赞点踩表的时候，你这些字段必须同步更新，因为你这里存的是普通的字段，那也就意味着你在操作点赞点踩表的时候要回到这张表把对应的字段改掉，否则就不是一一对应了。那操作一张表的时候，另外一张表也跟着同步更新，并且不能出错，跟它一一对应着更新，---->想到了事务，在你更新字段的时候就可以用到事务，操作点赞点踩表的时候，对应这张表的这三个普通字段也同步更新，这样就实现了，这张表的这三个普通的字段就可以表示点赞点踩表里面的数据了，就不用再跨表查询了


    点赞点踩表：(在另外一张表里面有，记录一张表里面到底有多少个点赞点踩，在这张表里面过滤一下，利用count就可以知道对应的文章到底有多少点赞点踩)
            用户名字段user       一对多         用户表/个人站点表
            文章字段article      一对多         文章表
            点赞点踩is_up        0/1
           user       article       is_up
           1            1              1
           2            1              0
           1            2              0

    文章评论表：(与点赞点踩表相同，将文章表拿出来到评论表筛选一下，把评论表对应的所有数据都筛选出来，然后统计一下就是你这篇文章的评论数)
            用户名字段user      一对多            用户表/个人站点表
            文章字段article     一对多             文章表
            评论内容content     一对多自己
            user    article    content      parent
              1         1        666
              1         2        888
              2         1        666


            注：通过博客园的评论我们可以看到
                评论内容包括根评论，子评论
                其中一个根评论可以对应多个子评论
                这时候我们需要另外一个字段
            父评论parent(自己跟自己关联)：我在记录你这个评论的时候，还要记录你这个评论到底是针对某篇文章的还是针对某一条评论的，如果是针对某一条评论的，我在给你渲染的时候还要在前面加上一个@，到底是@谁，评论的是谁，如果是根评论的话我直接给你渲染出来就行了
                   一条根评论可以有多个子评论，子评论也是这张表里面的
                   也就相当于这张表自己和自己关联，默认可以不写，不写就是根评论，只要你一写就是子评论，我后续通过外键关联，我一点parent，如果我能拿到值说明就是子评论，然后我能拿到当前这个子评论你想评论的父评论是谁，id是多少，然后帮你渲染到对应的父评论上去，或者给你来个@


表与表对应关系







